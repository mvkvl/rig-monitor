#!/usr/bin/env python3

import RPi.GPIO as GPIO

import _conf
import config
import output
import logger
import output.influxdb
from optparse import OptionParser

from killer   import GracefulKiller
from reptimer import RepeatedTimer

import sys
import threading
import time

class PowerAggregator(object):

    LOGGING_MODULE="power.a"

    def __init__(self, conf):
        self.conf = conf

    def __query(self, metric, field, tag, value):
        return "SELECT sum(\"{}\") FROM \"{}\" WHERE \"{}\" = '{}'".format(field, metric, tag, value)

    def run(self):
        query = self.__query("power", "value", "outlet", self.conf["power"]["outlet"])
        v = output.influxdb.read_data(self.conf["output"]["influxdb"], query, "sum")
        if v:
            if self.conf["power"]["verbose"]:
                print ("!", end="", file=sys.stdout, flush=True)
            output.influxdb.save_aggregated_power({"outlet": self.conf["power"]["outlet"], "value": v},
                                                   self.conf["output"]["influxdb"], metric="power",
                                                   module=self.LOGGING_MODULE,
                                                   loglevel=self.conf.get('loglevel') or "ERROR")
            sys.stdout.flush()

class App(object):

    LOGGING_MODULE="power"

    timers = []


    def __init__(self, conf):
        self.conf = conf

    def __report_data(self, F):
        output.write(conf=self.conf,
                     data={"outlet": self.conf["power"]["outlet"], "value": 1.0 / F},
                     save_function="save_power_value",
                     metric="power",
                     module=self.LOGGING_MODULE,
                     loglevel=self.conf.get('loglevel') or "ERROR")
        sys.stdout.flush()
        if self.conf["power"]["verbose"]:
            print ("+", end="", file=sys.stdout, flush=True)


    def __gpio_action(self, PIN, F, A):
        GPIO.wait_for_edge(PIN, GPIO.FALLING)
        self.n += 1
        if self.conf["power"]["verbose"]:
            print (".", end="", file=sys.stdout, flush=True)
        if self.n == A:
            self.n = 0
            threading.Thread(target=self.__report_data, args=([F])).start()
        # time.sleep(1)


    def run(self):
        __killer = GracefulKiller(shutdown_function=self.__shutdown)
        pa = PowerAggregator(config.read(opts.config))

        if self.conf.get('power'):

            PIN = self.conf["power"]["pin"]
            A = self.conf["power"]["meter_a"]
            F = 100
            self.n = 0

            GPIO.setmode(GPIO.BCM)
            GPIO.setup(PIN, GPIO.IN, pull_up_down=GPIO.PUD_UP)


            self.timers.append(
                RepeatedTimer(interval=config.get_value(self.conf, "timers.power", 600),
                              function=pa.run,
                              args=[])
            )
            self.timers.append(
                RepeatedTimer(interval=0,
                              function=self.__gpio_action,
                              args=[PIN, F, A / F])
            )
            logger.instance(self.LOGGING_MODULE, self.conf.get('loglevel') or "ERROR")\
                  .debug("~~~ starting power (aggregator) service ({} sec)".format(config.get_value(self.conf, "timers.power", 600)))
            [timer.start() for timer in self.timers]


    def __shutdown(self):
        logger.instance(self.LOGGING_MODULE, self.conf.get('loglevel') or "ERROR")\
              .debug("shutdown hook")
        [timer.stop() for timer in self.timers]
        GPIO.cleanup()       # clean up GPIO on CTRL+C exit


if __name__ == '__main__':

    # gets program arguments
    def get_program_arguments():
        parser = OptionParser()
        parser.add_option("-c", "--config", dest="config",
                                            help="configuration file")
        (options, arguments) = parser.parse_args()
        return options, arguments
    opts, args = get_program_arguments()
    if not opts.config:
        raise ValueError("configuration file argument not passed")

    App(config.read(opts.config)).run()



# def get_program_arguments():
#     parser = OptionParser()
#     parser.add_option("-i", "--write-influx", action="store_true", dest="write_influx", help="write data to influxdb",     default=False)
#     parser.add_option("-q", "--quiet",        action="store_true", dest="quiet",        help="no output to stdout",        default=False)
#     parser.add_option("-a", "--meter_a",      dest="meter_a",      help="A-parameter of power meter")
#     parser.add_option("-p", "--pin",          dest="input_pin",    help="input pin for pulses count (in BCM format)")
#     (options, arguments) = parser.parse_args()
#     if not options.meter_a or not options.input_pin:
#         raise Exception("not all needed parameters passed")
#     return options, arguments
#
# opts, args = get_program_arguments()
#
# print ("measuring power on pin {} with A = {}".format(opts.input_pin, opts.meter_a))
#
# def get_metric(metric, outlet):
#     res =  {"measurement": "{}".format(metric),
#             "tags": {
#                 "outlet": outlet,
#             },
#             "fields": {
#             }
#            }
#     return res
# def write_influxdb(info):
#     data = []
#     m = get_metric(metric="power", outlet="outlet001")
#     for k in info:
#         m['fields'][k] = float(info.get(k))
#     data.append(m)
#     # print(json.dumps(data, sort_keys=False,  indent=2,  separators=(',', ': ')))
#     client = InfluxDBClient(host='localhost', port=8086) # , username='myuser', password='mypass' ssl=True, verify_ssl=True)
#     client.switch_database('monitor')
#     if not client.write_points(data):
#         client.close()
#         raise Exception("could not write data to InfluxDB")
#     client.close()
#
# PIN = int(opts.input_pin)
# A   = int(opts.meter_a)
# F   = 10
# a   = A / F
# n   = 0
#
# def report_data():
#     global opts
#     global F
#     if not opts.quiet:
#         print ("!", end="", file=sys.stdout, flush=True)
#     if opts.write_influx:
#         write_influxdb({"value": 1.0 / F})
#     if not opts.quiet:
#         print ("+", end="", file=sys.stdout, flush=True)
#
#
# GPIO.setmode(GPIO.BCM)
# GPIO.setup(PIN, GPIO.IN, pull_up_down=GPIO.PUD_UP)
# try:
#     while True:
#         GPIO.wait_for_edge(PIN, GPIO.FALLING)
#         n += 1
#         if not opts.quiet:
#             print (".", end="", file=sys.stdout, flush=True)
#         if n == a:
#             n = 0
#             threading.Thread(target=report_data, args=()).start()
# except KeyboardInterrupt:
#     try:
#         GPIO.cleanup()       # clean up GPIO on CTRL+C exit
#     except Exception:
#         pass
# try:
#     GPIO.cleanup()           # clean up GPIO on normal exit
# except Exception:
#     pass












    # def __balance_action(self, config):
    #     wb = WalletBalance(config["wallet"]).query()
    #     output.write(conf=config,
    #                  data=wb,
    #                  save_function=output.influxdb.save_wallet_balance,
    #                  metric="balance.wallet")
    #     pb = PoolBalance(config["pool"]).query()
    #     output.write(conf=config,
    #                          data=pb,
    #                          save_function=output.influxdb.save_pool_balance,
    #                          metric="balance.pool")
    #     print("-" * 50)
    #     sys.stdout.flush()
