#!/usr/bin/env python3

import _conf
import config
import output
import output.influxdb
import output.console
import sys
from optparse import OptionParser
from crypto   import BlockchainInfo
from killer   import GracefulKiller
from reptimer import RepeatedTimer

class App(object):

    timers = []

    def __init__(self, conf):
        self.config = conf

    def __blockchain_action(self, config):
        bc = BlockchainInfo(config["blockchain"]).query()
        output.write(conf=config,
                     data=bc,
                     save_function=output.influxdb.save_blockchain_info,
                     metric="blockchain.network",
                     module=__file__)
        # print("-" * 100)
        sys.stdout.flush()

    def run(self):
        __killer = GracefulKiller(shutdown_function=self.__shutdown)
        if self.config.get('blockchain'):
            self.timers.append(
                RepeatedTimer(interval=config.get_value(self.config, "timers.blockchain", 600),
                              function=self.__blockchain_action,
                              args=[self.config])
            )
            print("~~~ starting blockchain poller ({} sec)".format(config.get_value(self.config, "timers.blockchain", 600)))
        [timer.start() for timer in self.timers]

    def __shutdown(self):
        print("shutdown hook")
        [timer.stop() for timer in self.timers]



if __name__ == '__main__':
    # gets program arguments
    def get_program_arguments():
        parser = OptionParser()
        parser.add_option("-c", "--config", dest="config",
                                            help="configuration file")
        (options, arguments) = parser.parse_args()
        return options, arguments
    opts, args = get_program_arguments()
    if not opts.config:
        raise ValueError("configuration file argument not passed")
    App(config.read(opts.config)).run()
