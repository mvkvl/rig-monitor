#!/usr/bin/env python3

import _conf
import config
import output
import output.influxdb
import output.console
import logger
import sys
from optparse import OptionParser
from crypto   import WorkerStatsCombo    as WorkerStatsCombo
from killer   import GracefulKiller
from reptimer import RepeatedTimer

LOGGING_MODULE="worker"

class App(object):

    timers = []

    def __init__(self, conf):
        self.config = conf

    def __worker_stats_action(self, conf):
        result = WorkerStatsCombo(conf["rig"], conf["pool"]).query()
        output.write(conf=conf,
                     data=result,
                     save_function=output.influxdb.save_worker_stats,
                     metric="rig.worker",
                     module="worker.rig",
                     loglevel=conf.get('loglevel') or "ERROR")
        output.write(conf=conf,
                     data=result,
                     save_function=output.influxdb.save_gpu_stats,
                     metric="rig.gpu",
                     module="worker.gpu",
                     loglevel=conf.get('loglevel') or "ERROR")
        output.write(conf=conf,
                     data=result,
                     save_function=output.influxdb.save_pool_worker_stats,
                     metric="pool.worker",
                     module="worker.pool",
                     loglevel=conf.get('loglevel') or "ERROR")
        # print("-" * 50)
        sys.stdout.flush()

    def run(self):
        __killer = GracefulKiller(shutdown_function=self.__shutdown)
        if self.config.get('pool') and self.config.get('rig'):
            self.timers.append(
                RepeatedTimer(interval=config.get_value(self.config, "timers.worker", 300),
                              function=self.__worker_stats_action,
                              args=[self.config])
            )
            logger.instance(LOGGING_MODULE, self.config.get('loglevel') or "ERROR")\
                  .debug("~~~ starting workers poller ({} sec)".format(config.get_value(self.config, "timers.worker", 300)))
        [timer.start() for timer in self.timers]

    def __shutdown(self):
        logger.instance(LOGGING_MODULE, self.config.get('loglevel') or "ERROR")\
              .debug("shutdown hook")
        [timer.stop() for timer in self.timers]



if __name__ == '__main__':
    # gets program arguments
    def get_program_arguments():
        parser = OptionParser()
        parser.add_option("-c", "--config", dest="config",
                                            help="configuration file")
        (options, arguments) = parser.parse_args()
        return options, arguments
    opts, args = get_program_arguments()
    if not opts.config:
        raise ValueError("configuration file argument not passed")
    App(config.read(opts.config)).run()
