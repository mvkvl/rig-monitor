#!/usr/bin/env python3

import conf
import config
from optparse import OptionParser
# from crypto   import PoolBalance         as PoolBalance
# from crypto   import WalletBalance       as WalletBalance
# from crypto   import PoolStats           as PoolStats
# from crypto   import WorkerStats         as WorkerStats
from crypto   import WorkerStatsCombo    as WorkerStatsCombo
# from snmp     import NetworkTrafficStats as NetworkTrafficStats
from killer   import GracefulKiller
from reptimer import RepeatedTimer
# import output.influxdb
# import output.console

class App(object):

    timers = []

    def __init__(self, conf):
        self.config = conf

    def __worker_stats_action(self, config):
        result = WorkerStatsCombo(config["rig"], config["pool"]).query()
        self.__data_output(conf=config,
                           data=result,
                           save_function=output.influxdb.save_worker_stats,
                           metric="rig.worker")
        self.__data_output(conf=config,
                           data=result,
                           save_function=output.influxdb.save_gpu_stats,
                           metric="rig.gpu")
        self.__data_output(conf=config,
                           data=result,
                           save_function=output.influxdb.save_pool_worker_stats,
                           metric="pool.worker")
    def run(self):
        __killer = GracefulKiller(shutdown_function=self.__shutdown)
        if self.config.get('pool') and self.config.get('rig'):
            self.timers.append(
                RepeatedTimer(interval=config.get_value(self.config, "timers.stats", 300),
                              function=self.__worker_stats_action,
                              args=[self.config])
            )
        [timer.start() for timer in self.timers]

    def __shutdown(self):
        print("shutdown hook")
        [timer.stop() for timer in self.timers]
        pass



if __name__ == '__main__':
    # gets program arguments
    def get_program_arguments():
        parser = OptionParser()
        parser.add_option("-c", "--config", dest="config",
                                            help="configuration file")
        (options, arguments) = parser.parse_args()
        return options, arguments
    opts, args = get_program_arguments()
    if not opts.config:
        raise ValueError("configuration file argument not passed")
    App(config.read(opts.config)).run()
