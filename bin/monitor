#!/usr/bin/env python3

import conf
import config
from optparse import OptionParser
from crypto   import PoolBalance         as PoolBalance
from crypto   import WalletBalance       as WalletBalance
from crypto   import PoolStats           as PoolStats
# from crypto   import WorkerStats         as WorkerStats
from crypto   import WorkerStatsCombo    as WorkerStatsCombo
from snmp     import NetworkTrafficStats as NetworkTrafficStats
from killer   import GracefulKiller
from reptimer import RepeatedTimer
import output.influxdb
import output.console

class App(object):

    timers = []

    def __init__(self, conf):
        self.config = conf

    def __data_output(self, conf, data, metric=None, save_function=None):
        # print result to stdout if console output is enabled in configuration
        if config.plugin_enabled("output", "console", conf):
            output.console.output(data)

        # save result to influxdb if influxdb output is enabled in configuration
        if config.plugin_enabled("output", "influxdb", conf):
            if metric and save_function:
                save_function(data,
                              conf["output"]["influxdb"],
                              metric=metric)

    def __wallet_balance_action(self, config):
        result = WalletBalance(config["wallet"]).query()
        self.__data_output(conf=config,
                           data=result,
                           save_function=output.influxdb.save_wallet_balance,
                           metric="balance.wallet")
    def __pool_balance_action(self, config):
        result = PoolBalance(config["pool"]).query()
        self.__data_output(conf=config,
                           data=result,
                           save_function=output.influxdb.save_pool_balance,
                           metric="balance.pool")
    def __worker_stats_action(self, config):
        result = WorkerStatsCombo(config["rig"], config["pool"]).query()
        self.__data_output(conf=config,
                           data=result,
                           save_function=output.influxdb.save_worker_stats,
                           metric="rig.worker")
        self.__data_output(conf=config,
                           data=result,
                           save_function=output.influxdb.save_gpu_stats,
                           metric="rig.gpu")
        self.__data_output(conf=config,
                           data=result,
                           save_function=output.influxdb.save_pool_worker_stats,
                           metric="pool.worker")
    def __net_traffic_action(self, config):
        result = NetworkTrafficStats(config["traffic"]).query()
        self.__data_output(conf=config,
                           data=result,
                           save_function=output.influxdb.save_traffic_stats,
                           metric="net.traffic")

    def run(self):
        __killer = GracefulKiller(shutdown_function=self.__shutdown)
        if self.config.get('traffic'):
            self.timers.append(
                RepeatedTimer(interval=config.get_value(self.config, "timers.traffic", 60),
                              function=self.__net_traffic_action,
                              args=[self.config])
            )
        if self.config.get('wallet'):
            self.timers.append(
                RepeatedTimer(interval=config.get_value(self.config, "timers.wallet", 600),
                              function=self.__wallet_balance_action,
                              args=[self.config])
            )
        # if self.config.get('pool'):
        #     self.timers.append(
        #         RepeatedTimer(interval=config.get_value(self.config, "timers.wallet", 600),
        #                       function=self.__pool_balance_action,
        #                       args=[self.config])
        #     )
        # if self.config.get('pool') and self.config.get('rig'):
        #     self.timers.append(
        #         RepeatedTimer(interval=config.get_value(self.config, "timers.stats", 300),
        #                       function=self.__worker_stats_action,
        #                       args=[self.config])
        #     )
        [timer.start() for timer in self.timers]
        print("S T A R T E D")

    def __shutdown(self):
        print("shutdown hook")
        [timer.stop() for timer in self.timers]
        pass



if __name__ == '__main__':
    # gets program arguments
    def get_program_arguments():
        parser = OptionParser()
        parser.add_option("-c", "--config", dest="config",
                                            help="configuration file")
        (options, arguments) = parser.parse_args()
        return options, arguments
    opts, args = get_program_arguments()
    if not opts.config:
        raise ValueError("configuration file argument not passed")
    App(config.read(opts.config)).run()
